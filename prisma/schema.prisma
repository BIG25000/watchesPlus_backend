generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String        @map("first_name")
  lastName     String        @map("last_name")
  email        String        @unique
  password     String
  mobile       String?       @db.VarChar(10)
  status       UserStatus    @default(ACTIVE)
  role         Role          @default(USER)
  profileImage String?       @map("profile_image")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)
  address      Address?
  toMessage    ChatMessage[] @relation("receiverId")
  fromMessage  ChatMessage[] @relation("senderId")
  receiver     ChatRoom[]    @relation("receiver")
  sender       ChatRoom[]    @relation("sender")
  inventory    Inventory[]
  royalty      Royalty?
  wallet       Wallet?
  wishlist     Wishlist[]

  @@map("users")
}

model Royalty {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  point     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id])

  @@map("royalties")
}

model Address {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique @map("user_id")
  province    String
  district    String
  subDistrict String?    @map("sub_district")
  zipCode     String     @map("zip_code")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamp(0)
  user        User       @relation(fields: [userId], references: [id])
  shipping    Shipping[]

  @@map("address")
}

model Wallet {
  id          Int                 @id @default(autoincrement())
  userId      Int                 @unique @map("user_id")
  amount      Int                 @default(0)
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  buyOrder    BuyOrder[]
  from_wallet TransactionWallet[] @relation("fromWallet")
  to_wallet   TransactionWallet[] @relation("toWallet")
  user        User                @relation(fields: [userId], references: [id])

  @@map("wallets")
}

model BuyOrder {
  id                Int                @id @default(autoincrement())
  watchId           Int                @unique @map("watch_id")
  walletId          Int                @map("wallet_id")
  createdAt         DateTime           @default(now()) @map("created_at")
  status            OrderStatus        @default(PENDING)
  price             Int
  wallet            Wallet             @relation(fields: [walletId], references: [id])
  watch             Watch              @relation(fields: [watchId], references: [id])
  TransactionWallet TransactionWallet?

  @@index([walletId], map: "buy_orders_wallet_id_fkey")
  @@map("buy_orders")
}

model SaleOrder {
  id                Int                @id @default(autoincrement())
  inventoryId       Int                @unique @map("inventory_id")
  price             Int
  createdAt         DateTime           @default(now()) @map("created_at")
  status            OrderStatus        @default(PENDING)
  inventory         Inventory          @relation(fields: [inventoryId], references: [id])
  TransactionWallet TransactionWallet?

  @@map("sale_orders")
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  watch     Watch[]

  @@map("brands")
}

model Watch {
  id                Int                 @id @default(autoincrement())
  brandId           Int                 @map("brand_id")
  modelName         String              @map("model_name")
  movement          Movement            @default(AUTOMATIC)
  gender            Gender              @default(MALE)
  powerReserve      String              @map("power_reserve")
  caseMaterial      String              @map("case_material")
  caseDiameter      String              @map("case_diameter")
  crystal           String
  dial              String
  braceletMaterial  String              @map("bracelet_material")
  braceletColor     String              @map("bracelet_color")
  description       String
  watchImage        String              @map("watch_image")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  buyOrder          BuyOrder?
  inventory         Inventory[]
  TransactionWallet TransactionWallet[]
  brand             Brand               @relation(fields: [brandId], references: [id])
  wishlist          Wishlist[]

  @@index([brandId], map: "watches_brand_id_fkey")
  @@map("watches")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  watchId   Int      @map("watch_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  watch     Watch    @relation(fields: [watchId], references: [id])

  @@index([userId], map: "wishlists_user_id_fkey")
  @@index([watchId], map: "wishlists_watch_id_fkey")
  @@map("wishlists")
}

model Inventory {
  id        Int             @id @default(autoincrement())
  watchId   Int             @map("watch_id")
  userId    Int             @map("user_id")
  status    InventoryStatus @default(PENDING)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  user      User            @relation(fields: [userId], references: [id])
  watch     Watch           @relation(fields: [watchId], references: [id])
  saleOrder SaleOrder?
  shipping  Shipping?

  @@index([userId], map: "inventories_user_id_fkey")
  @@index([watchId], map: "inventories_watch_id_fkey")
  @@map("inventories")
}

model Shipping {
  id             Int            @id @default(autoincrement())
  addressId      Int            @map("address_id")
  inventoryId    Int            @unique @map("inventory_id")
  trackingNumber String?
  status         ShippingStatus @default(PENDING)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  address        Address        @relation(fields: [addressId], references: [id])
  inventory      Inventory      @relation(fields: [inventoryId], references: [id])

  @@index([addressId], map: "shipping_address_id_fkey")
  @@map("shipping")
}

model TransactionWallet {
  id           Int             @id @default(autoincrement())
  fromWalletId Int?            @map("from_wallet_id")
  toWalletId   Int?            @map("to_wallet_id")
  watchId      Int?            @map("watch_id")
  type         TransactionType
  price        Int
  buyOrderId   Int?            @unique @map("buy_order_id")
  saleOrderId  Int?            @unique @map("sale_order_id")
  createdAt    DateTime        @default(now()) @map("created_at")
  buyOrder     BuyOrder?       @relation(fields: [buyOrderId], references: [id])
  fromWallet   Wallet?         @relation("fromWallet", fields: [fromWalletId], references: [id])
  saleOrder    SaleOrder?      @relation(fields: [saleOrderId], references: [id])
  toWallet     Wallet?         @relation("toWallet", fields: [toWalletId], references: [id])
  watch        Watch?          @relation(fields: [watchId], references: [id])

  @@index([fromWalletId], map: "transaction_wallets_from_wallet_id_fkey")
  @@index([toWalletId], map: "transaction_wallets_to_wallet_id_fkey")
  @@index([watchId], map: "transaction_wallets_watch_id_fkey")
  @@map("transaction_wallets")
}

model ChatRoom {
  id          Int           @id @default(autoincrement())
  userId      Int           @map("user_id")
  adminId     Int           @map("admin_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  chatMessage ChatMessage[]
  receiver    User          @relation("receiver", fields: [adminId], references: [id])
  sender      User          @relation("sender", fields: [userId], references: [id])

  @@index([adminId], map: "chat_room_admin_id_fkey")
  @@index([userId], map: "chat_room_user_id_fkey")
  @@map("chat_room")
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  chatRoomId Int      @map("chatroom_id")
  senderId   Int      @map("sender_id")
  receiverId Int      @map("receiver_id")
  message    String
  createdAt  DateTime @default(now()) @map("created_at")
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  receiver   User     @relation("receiverId", fields: [receiverId], references: [id])
  sender     User     @relation("senderId", fields: [senderId], references: [id])

  @@index([chatRoomId], map: "chat_message_chatroom_id_fkey")
  @@index([receiverId], map: "chat_message_receiver_id_fkey")
  @@index([senderId], map: "chat_message_sender_id_fkey")
  @@map("chat_message")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  ADMIN
}

enum Movement {
  AUTOMATIC
  QUARTZ
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum InventoryStatus {
  PENDING
  AVAILABLE
  SELLING
  FAILED
  SOLD
}

enum ShippingStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
}

enum OrderStatus {
  PENDING
  SUCCESS
  CANCELED
}
